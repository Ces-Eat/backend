generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// migration command :
// npx prisma migrate dev --name init

// db pull command :
// ?

model Role {
  //id String @id @default(cuid())
  id Int @id @default(autoincrement())
  name String @db.VarChar(30)
  users User[]
}

model User {
  id String @id @default(cuid())

  name String @db.VarChar(35)
  surname String @db.VarChar(35)
  email String @db.VarChar(320) @unique
  password String @db.VarChar(255)
  phone String @db.VarChar(15) @unique
  image String? @db.VarChar(300)

  isSuspended Boolean @default(false)
  
  role Role @relation(fields: [roleId], references: [id])
  roleId Int @default(1)

  refererUser Referent[] @relation("refered")
  ReferedUsers Referent[] @relation("referer")

  sessions Session[]

  deleted Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Referent {
  id String @id @default(cuid())

  referentUser User @relation("referer", fields: [referentUserId], references: [id])
  referentUserId String

  newUser User @relation("refered", fields: [newUserId], references: [id])
  newUserId String @unique

  createdAt DateTime @default(now())
}

model Session {
  id String @id @default(cuid())

  user User @relation(fields: [userId], references: [id])
  userId String

  valid Boolean @default(true)
  userAgent String @db.VarChar(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



// model Post {
//   id        Int      @id @default(autoincrement())
  
  
//   title     String   @db.VarChar(255)
//   content   String?
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }

// model Profile {
//   id     Int     @id @default(autoincrement())
//   bio    String?
//   user   User    @relation(fields: [userId], references: [id])
//   userId Int     @unique
// }

// model User {
//   id      Int      @id @default(autoincrement())
//   email   String   @unique
//   name    String?
//   posts   Post[]
//   profile Profile?
// }
